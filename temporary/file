<iframe class="pull-right" sandbox="allow-top-navigation allow-scripts allow-forms" style="border:none;"  height="40px" width="200px" src="/threadLikes?idlikes={{ .Id }}&userid={{ .UserId }}" name="iframe_a"></iframe>

on post or thread creation 
error check functions 
		// err = data.LikeOnPostCreation(alsoid, int(ourID)) // only with PostId
		// err = data.DislikeOnPostCreation(alsoid, int(ourID))
		// if err != nil {
		// 	utils.Danger(err, "Cannot Create Like/Dislike on Post Creation")
		// }


// POST /signup_account
// CREATE() the user account
func SignupAccount(writer http.ResponseWriter, request *http.Request) {
	result, err := stmt.Exec(userUUID, user.Name, user.Email, Encrypt(user.Password), createdAt)
	if err != nil {
		fmt.Println("Error during user creation:", err)
		return err
	}
	
	// Get the last inserted ID
	lastId, err := result.LastInsertId()
	if err != nil {
		fmt.Println("Error getting last insert ID:", err)
		return err
	}
	
	// Set the user fields
	user.Id = int(lastId)
	user.Uuid = userUUID
	user.CreatedAt = createdAt
	
	return

  <select name="sort_by">
    <option value="">Sort by Date (Newest)</option>
    <option value="likes" {{ if eq .SortBy "likes" }}selected{{ end }}>Sort by Most Likes</option>
  </select>